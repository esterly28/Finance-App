require("dotenv").config();
const { MongoClient } = require("mongodb");
const express = require("express");
const path = require("path");
const { ObjectId } = require("mongodb");

const uri = process.env.MONGO_URI;
const client = new MongoClient(uri);
const app = express();
const port = process.env.PORT || 7777;

app.use(express.static("www"));
app.use(express.json());

// Default route
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "www", "index.html"));
});

// Test route
app.get("/helloworld", (req, res) => {
  res.send("Hello World: Nolan Esterly and finance!");
});

// âœ… Retrieve all credit card records
app.get("/retrieve", async (req, res) => {
  try {
    await client.connect();
    const db = client.db("Finance_Storage");
    const collection = db.collection("creditcards");
    const records = await collection.find({}).toArray();
    res.json(records);
  } catch (err) {
    console.error("Error retrieving data:", err);
    res.status(500).json({ message: "Failed to retrieve data" });
  }
});

// âœ… Retrieve a single credit card by guestid
app.get("/retrieve-one/:id", async (req, res) => {
  try {
    await client.connect();
    const db = client.db("Finance_Storage");
    const collection = db.collection("creditcards");
    const record = await collection.findOne({ _id: new ObjectId(req.params.id) });
    res.json(record);
  } catch (err) {
    console.error("Error retrieving single record:", err);
    res.status(500).json({ message: "Failed to retrieve record" });
  }
});

// âœ… Update a record by MongoDB _id
app.put("/update/:id", async (req, res) => {
  try {
    await client.connect();
    const db = client.db("Finance_Storage");
    const collection = db.collection("creditcards");

    const result = await collection.updateOne(
      { _id: new ObjectId(req.params.id) },
      { $set: req.body }
    );

    res.json({ message: "Update successful", modifiedCount: result.modifiedCount });
  } catch (err) {
    console.error("Update error:", err);
    res.status(500).send("Update failed");
  }
});

// âœ… Insert a new credit card record (this is your main one)
app.post("/creditcards", async (req, res) => {
  try {
    await client.connect();
    const db = client.db("Finance_Storage");
    const table = db.collection("creditcards");

    const record = {
      interest: req.body.interest,
      amount: parseFloat(req.body.amount),
      timeToPayOff: req.body.timeToPayOff,
      provider: req.body.provider,
      entryDate: new Date(),
    };

    const result = await table.insertOne(record);
    res.send({ message: "Credit card saved successfully!" });
  } catch (err) {
    console.error("Error inserting credit card:", err);
    res.status(500).send({ error: err.message });
  }
});

// ðŸ§¹ Optional cleanup route if needed for deletion
app.delete("/delete/:id", async (req, res) => {
    try {
      await client.connect();
      const db = client.db("Finance_Storage");
      const collection = db.collection("creditcards");
  
      const result = await collection.deleteOne({ _id: new ObjectId(req.params.id) });
      res.send({ message: "Deleted", deletedCount: result.deletedCount });
    } catch (err) {
      console.error("Error deleting record:", err);
      res.status(500).send({ error: err.message });
    }
  });

// Start server
app.listen(port, () => {
  console.log(`Full-stack app is listening on port ${port}`);
});